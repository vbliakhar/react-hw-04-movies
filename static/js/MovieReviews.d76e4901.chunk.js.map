{"version":3,"sources":["components/MovieReviews/MovieReviews.jsx"],"names":["MovieReviews","moviesId","useParams","useState","reviews","setReview","useEffect","movieShellAPI","then","response","total_pages","results","map","review","author","content","id"],"mappings":"+KA8BeA,UA1BM,WACnB,IAAQC,EAAaC,cAAbD,SACR,EAA6BE,mBAAS,MAAtC,mBAAOC,EAAP,KAAgBC,EAAhB,KAQA,OANAC,qBAAU,WACRC,IAAkCN,GAAUO,MAAK,SAACC,GAChDA,EAASC,YAAc,EAAIL,EAAUI,EAASE,SAAWN,EAAU,WAEpE,CAACJ,IAGF,mCACGG,EACCA,EAAQQ,KAAI,SAACC,GAAD,OACV,+BACE,6BAAKA,EAAOC,SACZ,4BAAID,EAAOE,YAFJF,EAAOG,OAMlB","file":"static/js/MovieReviews.d76e4901.chunk.js","sourcesContent":["import { useParams } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport * as movieShellAPI from \"../../services/movieShelf-api\";\n\nconst MovieReviews = () => {\n  const { moviesId } = useParams();\n  const [reviews, setReview] = useState(null);\n\n  useEffect(() => {\n    movieShellAPI.fetchMovieByReviews(moviesId).then((response) => {\n      response.total_pages > 0 ? setReview(response.results) : setReview(null);\n    });\n  }, [moviesId]);\n\n  return (\n    <>\n      {reviews ? (\n        reviews.map((review) => (\n          <li key={review.id}>\n            <h3>{review.author}</h3>\n            <p>{review.content}</p>\n          </li>\n        ))\n      ) : (\n        <p>We don't have any reviews for this movie</p>\n      )}\n    </>\n  );\n};\n\nexport default MovieReviews;\n"],"sourceRoot":""}