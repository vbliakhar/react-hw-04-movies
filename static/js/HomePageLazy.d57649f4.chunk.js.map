{"version":3,"sources":["services/movieShelf-api.jsx","components/ImageError/cat.jpg","components/ImageError/ImageError.jsx","services/loader.jsx","views/HomePage/HomePage.jsx"],"names":["BASE_URL","myKey","fetchWithErrorHandling","a","url","config","fetch","response","ok","json","Promise","reject","Error","fetchMovies","fetchMovieById","moviesId","fetchMovieByActors","filmId","fetchMovieByReviews","fetchMovieBySearch","searchFilm","ImageError","src","errorImage","width","alt","loader","type","color","height","style","textAlign","HomePage","useRouteMatch","location","useLocation","useState","movies","setMovies","isLoader","setLoader","useEffect","isLoading","movieShellAPI","then","results","finally","textShadow","className","map","movie","title","to","pathname","id","state","form","label","poster_path"],"mappings":"sUAAMA,EAAW,gCACXC,EAAQ,mC,SAECC,I,2EAAf,4CAAAC,EAAA,6DAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,GAAzD,SACyBC,MAAMF,EAAKC,GADpC,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,oF,sBAMO,SAASC,IACd,OAAOX,EAAuB,GAAD,OAAIF,EAAJ,oCAAwCC,IAEhE,SAASa,EAAeC,GAC7B,OAAOb,EAAuB,GAAD,OACxBF,EADwB,iBACPe,EADO,oBACad,IAGrC,SAASe,EAAmBC,GACjC,OAAOf,EAAuB,GAAD,OACxBF,EADwB,iBACPiB,EADO,4BACmBhB,EADnB,oBAIxB,SAASiB,EAAoBD,GAClC,OAAOf,EAAuB,GAAD,OACxBF,EADwB,iBACPiB,EADO,4BACmBhB,EADnB,2BAIxB,SAASkB,EAAmBC,GACjC,OAAOlB,EAAuB,GAAD,OACxBF,EADwB,gCACQC,EADR,kBACuBmB,EADvB,iD,yCC5BhB,MAA0B,gC,OCU1BC,IARI,WACjB,OACE,mCACE,qBAAKC,IAAKC,EAAYC,MAAM,MAAMC,IAAI,gB,6HCO7BC,EAVA,kBACb,cAAC,IAAD,CACEC,KAAK,OACLC,MAAM,MACNC,OAAQ,GACRL,MAAO,GACPM,MAAO,CAAEC,UAAW,a,gBC4DTC,UA3DE,WACf,IAAQ5B,EAAQ6B,cAAR7B,IACF8B,EAAWC,cACjB,EAA4BC,mBAAS,MAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAiBC,EAAjB,KAWA,OATAC,qBAAU,WACRD,GAAU,SAACE,GAAD,OAAgBA,KAC1BC,MAEGC,MAAK,SAACrC,GACL+B,EAAU/B,EAASsC,YAEpBC,SAAQ,kBAAMN,GAAU,SAACE,GAAD,OAAgBA,UAC1C,IAED,gCACE,oBAAIZ,MAAO,CAAEC,UAAW,SAAUgB,WAAY,uBAA9C,4BAGCR,GAAYb,IACZW,GACC,oBAAIW,UAAU,WAAd,SACGX,EAAOY,KACN,SAACC,GAAD,OACEA,EAAMC,OACJ,6BACE,cAAC,IAAD,CACEC,GAAI,CACFC,SAAS,GAAD,OAAKjD,EAAL,kBAAkB8C,EAAMI,IAChCC,MAAO,CACLC,KAAM,CACJtB,WACAuB,MAAO,eANf,SAWGP,EAAMQ,YACL,qBACEpC,IAAG,8CAAyC4B,EAAMQ,aAClDjC,IAAKyB,EAAMC,MACX3B,MAAM,QAGR,cAACH,EAAA,EAAD,OAnBG6B,EAAMI","file":"static/js/HomePageLazy.d57649f4.chunk.js","sourcesContent":["const BASE_URL = \"https://api.themoviedb.org/3/\";\nconst myKey = \"18f3850d2e2b26a030fc97b3b8448670\";\n\nasync function fetchWithErrorHandling(url = \"\", config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error(\"not found\"));\n}\nexport function fetchMovies() {\n  return fetchWithErrorHandling(`${BASE_URL}trending/all/day?api_key=${myKey}`);\n}\nexport function fetchMovieById(moviesId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}movie/${moviesId}?api_key=${myKey}`\n  );\n}\nexport function fetchMovieByActors(filmId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}movie/${filmId}/credits?api_key=${myKey}&language=en-US`\n  );\n}\nexport function fetchMovieByReviews(filmId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}movie/${filmId}/reviews?api_key=${myKey}&language=en-US&page=1`\n  );\n}\nexport function fetchMovieBySearch(searchFilm) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}search/movie?api_key=${myKey}&query=${searchFilm}&language=en-US&page=1&include_adult=false`\n  );\n}\n","export default __webpack_public_path__ + \"static/media/cat.65c09fc9.jpg\";","import React from \"react\";\nimport errorImage from \"./cat.jpg\";\nconst ImageError = () => {\n  return (\n    <>\n      <img src={errorImage} width=\"150\" alt=\"Cat-cry\" />\n    </>\n  );\n};\n\nexport default ImageError;\n","import Loader from \"react-loader-spinner\";\n\nconst loader = () => (\n  <Loader\n    type=\"Puff\"\n    color=\"red\"\n    height={80}\n    width={80}\n    style={{ textAlign: \"center\" }}\n  />\n);\n\nexport default loader;\n","import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport * as movieShellAPI from \"../../services/movieShelf-api\";\nimport { Link, useRouteMatch } from \"react-router-dom\";\nimport { useLocation } from \"react-router-dom\";\nimport loader from \"../../services/loader\";\nimport \"./HomePage.scss\";\nimport ImageError from \"../../components/ImageError/ImageError\";\n\nconst HomePage = () => {\n  const { url } = useRouteMatch();\n  const location = useLocation();\n  const [movies, setMovies] = useState(null);\n  const [isLoader, setLoader] = useState(false);\n\n  useEffect(() => {\n    setLoader((isLoading) => !isLoading);\n    movieShellAPI\n      .fetchMovies()\n      .then((response) => {\n        setMovies(response.results);\n      })\n      .finally(() => setLoader((isLoading) => !isLoading));\n  }, []);\n  return (\n    <div>\n      <h1 style={{ textAlign: \"center\", textShadow: \"2px 2px 2px #CE5937\" }}>\n        Trending today\n      </h1>\n      {isLoader && loader()}\n      {movies && (\n        <ul className=\"blockImg\">\n          {movies.map(\n            (movie) =>\n              movie.title && (\n                <li key={movie.id}>\n                  <Link\n                    to={{\n                      pathname: `${url}movies/${movie.id}`,\n                      state: {\n                        form: {\n                          location,\n                          label: \"Home page\",\n                        },\n                      },\n                    }}\n                  >\n                    {movie.poster_path ? (\n                      <img\n                        src={`https://image.tmdb.org/t/p/original/${movie.poster_path}`}\n                        alt={movie.title}\n                        width=\"186\"\n                      />\n                    ) : (\n                      <ImageError />\n                    )}\n\n                    {/* {movie.title} */}\n                  </Link>\n                </li>\n              )\n          )}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default HomePage;\n"],"sourceRoot":""}