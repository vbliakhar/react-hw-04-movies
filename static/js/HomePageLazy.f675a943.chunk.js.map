{"version":3,"sources":["services/movieShelf-api.jsx","components/ImageError/cat.jpg","components/ImageError/ImageError.jsx","hoc/PaginationBox/PaginationBox.jsx","services/myScroll.jsx","components/ListMovie/ListMovie.jsx","services/loader.jsx","views/HomePage/HomePage.jsx"],"names":["BASE_URL","myKey","fetchWithErrorHandling","a","url","config","fetch","response","ok","json","Promise","reject","Error","fetchMovies","page","params","fetchMovieById","moviesId","fetchMovieByActors","filmId","fetchMovieByReviews","fetchMovieBySearch","searchFilm","ImageError","src","errorImage","width","alt","PaginationBox","currentPage","count","onChangePage","style","display","justifyContent","Pagination","shape","color","variant","onChange","event","pages","myScroll","window","scrollTo","top","document","documentElement","scrollHeight","behavior","ListMovie","movies","useRouteMatch","location","useLocation","useEffect","className","map","movie","title","to","pathname","id","state","form","label","poster_path","height","loader","type","textAlign","HomePage","useState","setMovies","isLoader","setLoader","setPage","isLoading","movieShellAPI","then","finally","textShadow","results","total_pages"],"mappings":"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","file":"static/js/HomePageLazy.f675a943.chunk.js","sourcesContent":["const BASE_URL = \"https://api.themoviedb.org/3/\";\nconst myKey = \"18f3850d2e2b26a030fc97b3b8448670\";\n\nasync function fetchWithErrorHandling(url = \"\", config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error(\"not found\"));\n}\nexport function fetchMovies(page) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}trending/all/day?api_key=${myKey}&page=${page}`,\n    {\n      params: 3,\n    }\n  );\n}\nexport function fetchMovieById(moviesId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}movie/${moviesId}?api_key=${myKey}`\n  );\n}\nexport function fetchMovieByActors(filmId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}movie/${filmId}/credits?api_key=${myKey}&language=en-US`\n  );\n}\nexport function fetchMovieByReviews(filmId) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}movie/${filmId}/reviews?api_key=${myKey}&language=en-US&page=1`\n  );\n}\nexport function fetchMovieBySearch(searchFilm, page) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}search/movie?api_key=${myKey}&query=${searchFilm}&language=en-US&page=1&include_adult=false&page=${page}`\n  );\n}\n","export default __webpack_public_path__ + \"static/media/cat.65c09fc9.jpg\";","import React from \"react\";\nimport errorImage from \"./cat.jpg\";\nconst ImageError = () => {\n  return (\n    <>\n      <img src={errorImage} width=\"150\" alt=\"Cat-cry\" />\n    </>\n  );\n};\n\nexport default ImageError;\n","import React from \"react\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nconst PaginationBox = ({ currentPage, count, onChangePage }) => {\n  return (\n    <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n      <Pagination\n        shape=\"rounded\"\n        color=\"secondary\"\n        variant=\"outlined\"\n        page={currentPage}\n        count={count}\n        onChange={(event, pages) => {\n          onChangePage(pages);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default PaginationBox;\n","const myScroll = () => {\n  return window.scrollTo({\n    top: document.documentElement.scrollHeight,\n    behavior: \"smooth\",\n  });\n};\nexport default myScroll;\n","import React from \"react\";\nimport ImageError from \"../ImageError/ImageError\";\nimport { Link, useRouteMatch, useLocation } from \"react-router-dom\";\nimport PaginationBox from \"../../hoc/PaginationBox/PaginationBox\";\nimport myScroll from \"../../services/myScroll\";\nimport { useEffect } from \"react\";\n\nconst ListMovie = ({ movies, currentPage, count, onChangePage }) => {\n  const { url } = useRouteMatch();\n  const location = useLocation();\n  useEffect(() => myScroll(), [movies]);\n  return (\n    <>\n      <ul className=\"blockImg\">\n        {movies.map(\n          (movie) =>\n            movie.title && (\n              <li key={movie.id}>\n                <Link\n                  to={{\n                    pathname: `${url}${\n                      location.pathname === \"/\" ? \"movies/\" : \"/\"\n                    }${movie.id}`,\n                    state: {\n                      form: {\n                        location,\n                        label: \"Home page\",\n                      },\n                    },\n                  }}\n                >\n                  {movie.poster_path ? (\n                    <img\n                      src={`https://image.tmdb.org/t/p/original/${movie.poster_path}`}\n                      alt={movie.title}\n                      width=\"186\"\n                      height=\"278.984\"\n                    />\n                  ) : (\n                    <ImageError />\n                  )}\n\n                  {/* {movie.title} */}\n                </Link>\n              </li>\n            )\n        )}\n      </ul>\n      <PaginationBox\n        currentPage={currentPage}\n        count={count}\n        onChangePage={onChangePage}\n      />\n    </>\n  );\n};\n\nexport default ListMovie;\n","import Loader from \"react-loader-spinner\";\n\nconst loader = () => (\n  <Loader\n    type=\"Puff\"\n    color=\"red\"\n    height={80}\n    width={80}\n    style={{ textAlign: \"center\" }}\n  />\n);\n\nexport default loader;\n","import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport * as movieShellAPI from \"../../services/movieShelf-api\";\nimport loader from \"../../services/loader\";\nimport \"./HomePage.scss\";\nimport ListMovie from \"../../components/ListMovie/ListMovie\";\n\nconst HomePage = () => {\n  const [movies, setMovies] = useState(null);\n  const [isLoader, setLoader] = useState(false);\n  const [page, setPage] = useState(1);\n  useEffect(() => {\n    setLoader((isLoading) => !isLoading);\n    movieShellAPI\n      .fetchMovies(page)\n      .then((response) => {\n        setMovies(response);\n      })\n      .finally(() => {\n        setLoader((isLoading) => !isLoading);\n      });\n  }, [page]);\n  const onChangePage = (page) => {\n    setPage(page);\n  };\n\n  return (\n    <div>\n      <h1 style={{ textAlign: \"center\", textShadow: \"2px 2px 2px #CE5937\" }}>\n        Trending today\n      </h1>\n      {isLoader && loader()}\n      {movies && (\n        <>\n          <ListMovie\n            movies={movies.results}\n            currentPage={movies.page}\n            count={movies.total_pages}\n            onChangePage={onChangePage}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default HomePage;\n"],"sourceRoot":""}